# generated by fastapi-codegen:
#   filename:  finder.yaml
#   timestamp: 2022-02-24T21:51:03+00:00

#from __future__ import annotations

from typing import Union, Optional

from datetime import datetime

from fastapi import Depends, FastAPI, HTTPException, Query

from pydantic import conint, constr

from models import Adopter, Animal, Color, Error, Partnership, Sociopath, Success 

from database import SessionLocal, engine

import schemas, crud

from sqlalchemy.orm import Session

schemas.Base.metadata.create_all(bind=engine)

app = FastAPI(version='1.0', title='Matcher', servers=[{'url': 'localhost:3000'}], )

def get_db():
  db = SessionLocal()
  try:
    yield db
  finally:
    db.close()


@app.get('/adopter', response_model=Adopter, responses={'default': {'model': Error}})
def get_adopter(
    rfc: str,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)] = 1000,
    gender: str = ...,
    street: str = ...,
    number: int = ...,
    db: Session = Depends(get_db)
) -> Union[Adopter, Error]:
  
  adopter = crud.get_adopter_(rfc=rfc,gender=gender,street=street,number=number,skip=skip,limit=limit, db = db)

  return adopter

@app.delete(
    '/deleteAdopter', response_model=Success, responses={'default': {'model': Error}}
)
def delete_delete_adopter(
    rfc: str,
    gender: str,
    street: str, number: int,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)] = 1000,
    db: Session = Depends(get_db)
) -> Union[Success, Error]:
  
  message = crud.delete_adopter_(db=db, rfc=rfc, gender=gender, street=street, number=number , skip=skip, limit=limit)

  return message

@app.post(
    '/insertAdopter',
    response_model=None,
    responses={'201': {'model': Success}, 'default': {'model': Error}},
)
def post_insert_adopter(
    adopter: Adopter,
    db : Session = Depends(get_db)
) -> Union[None, Success, Error]:

  message = crud.post_adopter_(Adopter = adopter, db = db)    

  return message
    

@app.put(
    '/deleteAdopter', response_model=Success, responses={'default': {'model': Error}}
)
def put_delete_adopter(
    rfc: str,
    gender: str,
    street: str,
    number: int,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)]= 1000,
    db : Session = Depends(get_db)
) -> Union[Success, Error]:

  message = crud.update_adopter_(db=db, rfc=rfc, gender=gender, street=street, number=number , skip=skip, limit=limit)

  return message
  
@app.get('/animal', response_model=Animal, responses={'default': {'model': Error}})
def get_animal(
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)]= 1000,
    size: Optional[int] = None,
    body: Optional[int] = None,
    chest: Optional[int] = None,
    neck: Optional[int] = None,
    breed: Optional[constr(min_length=10)] = None,
    color: Optional[Color] = None,
    first_image: str = Query(..., alias='firstImage'),
    sign_date: Optional[datetime] = Query(None, alias='signDate'),
    status_ind: Optional[conint(ge=0, le=1)] = Query(None, alias='statusInd'),
    db: Session = Depends(get_db)
) -> Union[Animal, Error]:

  animal = crud.get_animal_(breed = breed, color = color, skip = skip, limit = limit, db = db)

  return animal

@app.delete(
    '/deleteAnimal', response_model=Success, responses={'default': {'model': Error}}
)
def delete_delete_animal(
    breed : str,
    color: str,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)]= 1000,
    db: Session = Depends(get_db)
) -> Union[Success, Error]:

  message = crud.delete_animal_(db = db, breed = breed, color = color, skip= skip, limit = limit)

  return message 

@app.post(
    '/insertAnimal',
    response_model=None,
    responses={'201': {'model': Success}, 'default': {'model': Error}},
)
def post_insert_animal(
    animal: Animal,
    db : Session = Depends(get_db)
) -> Union[None, Success, Error]:

  message = crud.post_animal_(animal = animal, db= db )

  return message
  

@app.put(
    '/deleteAnimal', response_model=Success, responses={'default': {'model': Error}}
)
def put_delete_animal(
    breed : str ,
    color: str,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)] = 100,
    rfc: Optional[str] = None,
    db: Session = Depends(get_db)
) -> Union[Success, Error]:

  message =  crud.update_animal_(db=db, breed= breed , color= color, skip = skip, limit = limit)

  return message

  
@app.get(
    '/partnership', response_model=Partnership, responses={'default': {'model': Error}}
)
def get_partnership(
    rfc: str,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)] = 100,
    street: str = ...,
    number: int = ...,
    db: Session = Depends(get_db)
) -> Union[Partnership, Error]:

  partnership = crud.get_partnership_(rfc = rfc, street = street, number= number, skip = skip, limit = limit, db = db)

  return partnership


@app.delete(
    '/deletePartnership',
    response_model=Success,
    responses={'default': {'model': Error}},
)
def delete_delete_partnership(
    rfc: str,
    street: str,
    number: int,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)] = 100,
    db: Session = Depends(get_db)
) -> Union[Success, Error]:

  message = crud.delete_partnership_(db= db, rfc= rfc, street= street, number= number, skip= skip, limit= limit)

  return message  

@app.post(
    '/insertPartnership',
    response_model=None,
    responses={'201': {'model': Success}, 'default': {'model': Error}},
)
def post_insert_partnership(
    partnership: Partnership,
    db: Session = Depends(get_db)
) -> Union[None, Success, Error]:

  message = crud.post_partnership_(partnership= partnership, db= db )

  return message

@app.put(
    '/deletePartnership',
    response_model=Success,
    responses={'default': {'model': Error}},
)
def put_delete_partnership(
    rfc: str,
    street: str,
    number: int,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)] = 100,
    db: Session = Depends(get_db)
) -> Union[Success, Error]:

  message = crud.update_partnership_(db=db, rfc=rfc, street=street, number=number, skip=skip, limit=limit)

  return message  

  
@app.get(
    '/sociopath', response_model=Sociopath, responses={'default': {'model': Error}}
)
def get_sociopath(
    code: int = ...,
    gender: str = ...,
    street: str = ...,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)] = 100,
    number: int = ...,
    db: Session = Depends(get_db)
) -> Union[Sociopath, Error]:

  sociopath = crud.get_sociopath_(gender= gender, street= street, number= number, code=code, skip= skip, limit= limit, db = db)

  return sociopath


@app.delete(
    '/deleteSociopath', response_model=Success, responses={'default': {'model': Error}}
)
def delete_delete_sociopath(
    gender: str,
    street: str,
    number: int,
    code: int,
    rfc: Optional[str] = None,
    db: Session = Depends(get_db)
) -> Union[Success, Error]:

  message = crud.delete_sociopath_(db=db, rfc=rfc, gender=gender, street=street, number=number, code=code)

  return message

@app.post(
    '/insertSociopath',
    response_model=None,
    responses={'201': {'model': Success}, 'default': {'model': Error}},
)
def post_insert_sociopath(
    sociopath: Sociopath,
    db: Session = Depends(get_db)

) -> Union[None, Success, Error]:
  
  message =  crud.post_sociopath_(db = db, Sociopath = sociopath )

  return message

@app.put(
    '/deleteSociopath', response_model=Success, responses={'default': {'model': Error}}
)
def put_delete_sociopath(
    rfc: str,
    gender: str,
    street: str,
    number: int,
    code: int,
    skip: Optional[conint(ge=0)] = 0,
    limit: Optional[conint(ge=0)] = 100,
    db: Session = Depends(get_db)

) -> Union[Success, Error]:

  message = crud.update_sociopath_(db= db, rfc= rfc, gender= gender, street= street, number= number, code= code, skip= skip, limit= limit)

  return message

  
#street -> calle number -> numero section -> seccion district -> colonia  village -> municipio/alcaldia country -> pais code -> postal






